# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2

defaults_working_directory: &defaults_working_directory
  working_directory: ~/repo

defaults_helm_working_directory: &defaults_helm_working_directory
  working_directory: /home/circleci/project

defaults_docker_node: &defaults_docker_node
  docker:
    - image: circleci/openjdk:8-jdk

defaults_docker_helm_kube: &defaults_docker_helm_kube
  docker:
    - image: hypnoglow/kubernetes-helm

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_Environment: &defaults_environment
  environment:
    MAVEN_OPTS: -Xmx3200m
    WSO2_SERVER_VERSION: "2.6.0"

defaults_build_docker_login: &defaults_build_docker_login
  name: Login to Docker Hub
  command: |
    docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_ORG

defaults_build_docker_build: &defaults_build_docker_build
  name: Build Docker image
  command: |
    docker build --build-arg WSO2_SERVER_VERSION=$WSO2_SERVER_VERSION --no-cache -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$CIRCLE_TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$RELEASE_TAG .

defaults_build_docker_publish: &defaults_build_docker_publish
  name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
  command: |
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$CIRCLE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$CIRCLE_TAG
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$RELEASE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$RELEASE_TAG

defaults_deploy_prequisites: &defaults_deploy_prequisites
  name: Copy deployment pre-requisites from S3 bucket
  command: |
    if [ -z "$K8_USER_TOKEN" ];
    then
        echo "Copying K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
        mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
    else
        echo "Skipping K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
    fi

    echo "Copying Helm value file into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM folder for $K8_RELEASE_NAME release"
    mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM
    aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/

defaults_deploy_config_kubernetes_cluster: &defaults_deploy_config_kubernetes_cluster
  name: Configure Kubernetes cluster
  command: |
    echo "Configure Kubernetes cluster ${K8_CLUSTER_NAME}"
    kubectl config set-cluster $K8_CLUSTER_NAME --server=$K8_CLUSTER_SERVER --insecure-skip-tls-verify=true

defaults_deploy_config_kubernetes_credentials: &defaults_deploy_config_kubernetes_credentials
  name: Configure Kubernetes credentails
  command: |
    echo "Configure Kubernetes credentials ${K8_USER_NAME}"
    if [ ! -z "$K8_USER_TOKEN" ];
    then
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Token"
        kubectl config set-credentials $K8_USER_NAME --token=$K8_USER_TOKEN
    else
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Certs"
        kubectl config set-credentials $K8_USER_NAME --client-certificate=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME --client-key=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME
    fi

defaults_deploy_config_kubernetes_context: &defaults_deploy_config_kubernetes_context
  name: Confi gure Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config set-context $K8_CLUSTER_NAME --cluster=$K8_CLUSTER_NAME --user=$K8_USER_NAME --namespace=$K8_NAMESPACE

defaults_deploy_set_kubernetes_context: &defaults_deploy_set_kubernetes_context
  name: Set Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config use-context $K8_CLUSTER_NAME

defaults_deploy_configure_helm: &defaults_deploy_configure_helm
  name: Configure Helm
  command: |
    helm init --client-only

defaults_deploy_install_or_upgrade_helm_chart: &defaults_deploy_install_or_upgrade_helm_chart
  name: Install or Upgrade Helm Chart
  command: |
    echo "Install or Upgrade Chart ${K8_RELEASE_NAME} for Docker Image ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
    if [ -z "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")"  ] && [ "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")" != "Error: Unauthorized" ];
    then
        echo "Installing ${K8_RELEASE_NAME} new release"
        helm install --namespace=$K8_NAMESPACE --name=$K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    else
        echo "Upgrading ${K8_RELEASE_NAME} release"
        helm upgrade $K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION --reuse-values $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    fi

jobs:
  setup:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    <<: *defaults_environment
    steps:
      - checkout


  build:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    <<: *defaults_environment

    steps:
      - checkout
      - setup_remote_docker
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "Dockerfile" }}
      #      # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-
      - run:
          name: Setup Docker Build
          command: |
            #echo "$WSO2_SERVER_VERSION"-$(echo $CIRCLE_SHA1 | cut -c -7)-$CIRCLE_BUILD_NUM > tempvers.txt
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=mysql:mysql-connector-java:5.1.46:jar -Dtransitive=false -Ddest=./files/lib/mysql-connector-java-5.1.46.jar
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.dnsjava:dnsjava:2.1.8:jar -Dtransitive=false -Ddest=./files/lib/dnsjava-2.1.8.jar
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.wso2:DFSPSourceValidator:1.0:jar -Dtransitive=false -Ddest=./files/dropins/DFSPSourceValidator-1.0.jar
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.wso2.carbon.kubernetes.artifacts:kubernetes-membership-scheme:1.0.5:jar -Dtransitive=false -Ddest=./files/dropins/kubernetes-membership-scheme-1.0.5.jar
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.wso2:JWSGenerator:1.0:jar -Dtransitive=false -Ddest=./files/dropins/JWSGenerator-1.0.jar
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.wso2:registry-restapi:4.6.28:war -Dtransitive=false -Ddest=./files/wars/resource.war
            mvn -q -s .circleci/settings.xml dependency:get -Dartifact=org.wso2:wso2am:$WSO2_SERVER_VERSION:zip -Dtransitive=false -Ddest=./files/wso2am-$WSO2_SERVER_VERSION.zip
            unzip -o -q ./files/wso2am-$WSO2_SERVER_VERSION.zip -d ./files
            
      #save cache before deleting zip
      # - save_cache:
      #      key: v1-dependencies-{{ checksum "Dockerfile" }}
      #      paths:
      #        - ./files

      - run:
          name: Build application Docker image
          command: |       
            rm -f ./files/wso2am-$WSO2_SERVER_VERSION.zip
            ls -la ./files/*

      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_build_docker_login
      - run:
          <<: *defaults_build_docker_build
      - run:
          <<: *defaults_build_docker_publish

#            docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_REPO
#            docker build --no-cache -t $DOCKER_REPO/$DOCKER_REPO_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$(cat tempvers.txt) .
#            docker push $DOCKER_REPO/$DOCKER_REPO_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION:$(cat tempvers.txt)

  deploy:
    <<: *defaults_helm_working_directory
    <<: *defaults_docker_helm_kube
    <<: *defaults_environment
    steps:
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - run:
          name: setup environment vars for release
          command: |
            echo 'export HELM_VALUE_FILENAME=$K8_HELM_VALUE_FILENAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_CLUSTER_SERVER=$K8_CLUSTER_SERVER_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_RELEASE_NAME=$K8_RELEASE_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_NAMESPACE=$K8_NAMESPACE_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_USER_NAME=$K8_USER_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_USER_TOKEN=$K8_USER_TOKEN_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_HELM_CHART_NAME=$K8_HELM_CHART_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_HELM_CHART_VERSION=$K8_HELM_CHART_VERSION_SNAPSHOT' >> $BASH_ENV
            echo 'export HELM_VALUE_SET_VALUES="--set wso2am-docker.containers.api.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION --set wso2am-docker.containers.api.image.tag=$CIRCLE_TAG --set wso2am-docker.containers.admin.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-$WSO2_SERVER_VERSION --set wso2am-docker.containers.admin.image.tag=$CIRCLE_TAG"' >> $BASH_ENV
      - run:
          <<: *defaults_deploy_prequisites
      - run:
          <<: *defaults_deploy_config_kubernetes_cluster
      - run:
          <<: *defaults_deploy_config_kubernetes_credentials
      - run:
          <<: *defaults_deploy_config_kubernetes_context
      - run:
          <<: *defaults_deploy_set_kubernetes_context
      - run:
          <<: *defaults_deploy_configure_helm
      - run:
          <<: *defaults_deploy_install_or_upgrade_helm_chart

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - /.*/
      # - deploy:
      #     context: org-global
      #     requires:
      #       - build
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore:
      #           - /.*/
